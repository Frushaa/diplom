openapi: 3.0.0
info:
  title: Diplom API
  version: 1.0.0
servers:
  - url: http://localhost:3001/api
    description: Локальный сервер

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [client, master]
    Service:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
        duration:
          type: string
    WorkSlot:
      type: object
      properties:
        id:
          type: integer
        master_id:
          type: integer
        date:
          type: string
          format: date
        start_time:
          type: string
        end_time:
          type: string
    Break:
      type: object
      properties:
        id:
          type: integer
        work_slot_id:
          type: integer
        start_time:
          type: string
        end_time:
          type: string

    BookingRequest:
      type: object
      properties:
        service_id:
          type: integer
          example: 1
        work_slot_id:
          type: integer
          example: 1

    Booking:
      type: object
      properties:
        id:
          type: integer
        client_id:
          type: integer
        service_id:
          type: integer
        work_slot_id:
          type: integer
        status:
          type: string
          enum: [pending, confirmed, canceled]

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [client, master]
                  default: client
              example:
                username: "testuser"
                email: "test@example.com"
                password: "secret123"
                role: "client"
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags: [Auth]
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: "test@example.com"
                password: "secret123"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/profile:
    get:
      tags: [Auth]
      summary: Получить профиль пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неавторизованный доступ

  /services:
    get:
      tags: [Services]
      summary: Получить список услуг
      responses:
        '200':
          description: Список услуг
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      tags: [Services]
      summary: Создать новую услугу (только для мастера)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Мужская стрижка"
                description:
                  type: string
                  example: "Стрижка машинкой"
                price:
                  type: number
                  example: 1500
                duration:
                  type: string
                  example: "1 час"
      responses:
        '201':
          description: Услуга успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /schedule/work-slots:
    post:
      tags: [Schedule]
      summary: Создать рабочий слот (только для мастера)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: "2024-01-20"
                start_time:
                  type: string
                  example: "09:00"
                end_time:
                  type: string
                  example: "18:00"
      responses:
        '201':
          description: Создан рабочий слот
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkSlot' 

  /schedule/work-slots/{id}/breaks:
    post:
      tags: [Schedule]
      summary: Добавить перерыв в рабочий слот
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: string
                  example: "13:00"
                end_time:
                  type: string
                  example: "14:00"
      responses:
        '201':
          description: Создан перерыв
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Break'
      
  /bookings:
    post:
      tags: [Bookings]
      summary: Создать бронирование (клиент)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '201':
          description: Бронирование создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
  
  /schedule/available-slots:
    get:
      tags: [Schedule]
      summary: Получить свободные слоты с учетом перерывов
      parameters:
        - name: service_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список доступных интервалов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    start_time:
                      type: string
                    end_time:
                      type: string